
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c60  08002c60  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c60  08002c60  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c60  08002c60  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000002c  08002c94  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08002c94  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e2a  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc3  00000000  00000000  00029e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017241  00000000  00000000  0002d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000deca  00000000  00000000  00044339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082692  00000000  00000000  00052203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a70  00000000  00000000  000d48e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c24 	.word	0x08002c24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002c24 	.word	0x08002c24

0800014c <fsm_automatic>:
#include "automatic.h"

int countdownX = 0;
int countdownY = 0;

void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b92      	ldr	r3, [pc, #584]	; (800039c <fsm_automatic+0x250>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b0d      	cmp	r3, #13
 8000158:	f200 8179 	bhi.w	800044e <fsm_automatic+0x302>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800019d 	.word	0x0800019d
 8000168:	0800044f 	.word	0x0800044f
 800016c:	0800044f 	.word	0x0800044f
 8000170:	0800044f 	.word	0x0800044f
 8000174:	0800044f 	.word	0x0800044f
 8000178:	0800044f 	.word	0x0800044f
 800017c:	0800044f 	.word	0x0800044f
 8000180:	0800044f 	.word	0x0800044f
 8000184:	0800044f 	.word	0x0800044f
 8000188:	0800044f 	.word	0x0800044f
 800018c:	080001eb 	.word	0x080001eb
 8000190:	08000279 	.word	0x08000279
 8000194:	08000311 	.word	0x08000311
 8000198:	080003b9 	.word	0x080003b9
		case AUTO: {
			if (1) {
				status = GREEN_RED;
 800019c:	4b7f      	ldr	r3, [pc, #508]	; (800039c <fsm_automatic+0x250>)
 800019e:	220b      	movs	r2, #11
 80001a0:	601a      	str	r2, [r3, #0]
				countdownX = greenTime - 1;
 80001a2:	4b7f      	ldr	r3, [pc, #508]	; (80003a0 <fsm_automatic+0x254>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	3b01      	subs	r3, #1
 80001a8:	4a7e      	ldr	r2, [pc, #504]	; (80003a4 <fsm_automatic+0x258>)
 80001aa:	6013      	str	r3, [r2, #0]
				countdownY = redTime - 1;
 80001ac:	4b7e      	ldr	r3, [pc, #504]	; (80003a8 <fsm_automatic+0x25c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	3b01      	subs	r3, #1
 80001b2:	4a7e      	ldr	r2, [pc, #504]	; (80003ac <fsm_automatic+0x260>)
 80001b4:	6013      	str	r3, [r2, #0]
				updateBufferXLine(countdownX);
 80001b6:	4b7b      	ldr	r3, [pc, #492]	; (80003a4 <fsm_automatic+0x258>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fed2 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(countdownY);
 80001c0:	4b7a      	ldr	r3, [pc, #488]	; (80003ac <fsm_automatic+0x260>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 fefd 	bl	8000fc4 <updateBufferYLine>
				setTimer(0, greenTime * 1000); // Timer 1
 80001ca:	4b75      	ldr	r3, [pc, #468]	; (80003a0 <fsm_automatic+0x254>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001d2:	fb02 f303 	mul.w	r3, r2, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 ff23 	bl	8001024 <setTimer>
				setTimer(1, 1000);
 80001de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 ff1e 	bl	8001024 <setTimer>
			}
			break;
 80001e8:	e13a      	b.n	8000460 <fsm_automatic+0x314>
		}
		case GREEN_RED: {
			trafficGreenRed();
 80001ea:	f000 fff7 	bl	80011dc <trafficGreenRed>
			if (timer_flag[0] == 1) {
 80001ee:	4b70      	ldr	r3, [pc, #448]	; (80003b0 <fsm_automatic+0x264>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d111      	bne.n	800021a <fsm_automatic+0xce>
				status = AMBER_RED;
 80001f6:	4b69      	ldr	r3, [pc, #420]	; (800039c <fsm_automatic+0x250>)
 80001f8:	220c      	movs	r2, #12
 80001fa:	601a      	str	r2, [r3, #0]
				setTimer(0, yellowTime * 1000); // Timer 1
 80001fc:	4b6d      	ldr	r3, [pc, #436]	; (80003b4 <fsm_automatic+0x268>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000204:	fb02 f303 	mul.w	r3, r2, r3
 8000208:	4619      	mov	r1, r3
 800020a:	2000      	movs	r0, #0
 800020c:	f000 ff0a 	bl	8001024 <setTimer>
				countdownX = yellowTime - 1;
 8000210:	4b68      	ldr	r3, [pc, #416]	; (80003b4 <fsm_automatic+0x268>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3b01      	subs	r3, #1
 8000216:	4a63      	ldr	r2, [pc, #396]	; (80003a4 <fsm_automatic+0x258>)
 8000218:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 800021a:	4b65      	ldr	r3, [pc, #404]	; (80003b0 <fsm_automatic+0x264>)
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d118      	bne.n	8000254 <fsm_automatic+0x108>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 8000222:	4b60      	ldr	r3, [pc, #384]	; (80003a4 <fsm_automatic+0x258>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fe9c 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(countdownY);
 800022c:	4b5f      	ldr	r3, [pc, #380]	; (80003ac <fsm_automatic+0x260>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fec7 	bl	8000fc4 <updateBufferYLine>
				countdownX--;
 8000236:	4b5b      	ldr	r3, [pc, #364]	; (80003a4 <fsm_automatic+0x258>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3b01      	subs	r3, #1
 800023c:	4a59      	ldr	r2, [pc, #356]	; (80003a4 <fsm_automatic+0x258>)
 800023e:	6013      	str	r3, [r2, #0]
				countdownY--;
 8000240:	4b5a      	ldr	r3, [pc, #360]	; (80003ac <fsm_automatic+0x260>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	3b01      	subs	r3, #1
 8000246:	4a59      	ldr	r2, [pc, #356]	; (80003ac <fsm_automatic+0x260>)
 8000248:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 800024a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800024e:	2001      	movs	r0, #1
 8000250:	f000 fee8 	bl	8001024 <setTimer>
			}
			if (isButtonPressed(0)) {
 8000254:	2000      	movs	r0, #0
 8000256:	f000 f95d 	bl	8000514 <isButtonPressed>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	f000 80f8 	beq.w	8000452 <fsm_automatic+0x306>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 8000262:	4b4e      	ldr	r3, [pc, #312]	; (800039c <fsm_automatic+0x250>)
 8000264:	2202      	movs	r2, #2
 8000266:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000268:	f242 7110 	movw	r1, #10000	; 0x2710
 800026c:	2002      	movs	r0, #2
 800026e:	f000 fed9 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000272:	f001 f8d5 	bl	8001420 <clearTrafficLight>
			}
			break;
 8000276:	e0ec      	b.n	8000452 <fsm_automatic+0x306>
		}
		case AMBER_RED: {
			trafficYellowRed();
 8000278:	f000 ffda 	bl	8001230 <trafficYellowRed>
			if (timer_flag[0] == 1) {
 800027c:	4b4c      	ldr	r3, [pc, #304]	; (80003b0 <fsm_automatic+0x264>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d116      	bne.n	80002b2 <fsm_automatic+0x166>
				status = RED_GREEN;
 8000284:	4b45      	ldr	r3, [pc, #276]	; (800039c <fsm_automatic+0x250>)
 8000286:	220d      	movs	r2, #13
 8000288:	601a      	str	r2, [r3, #0]
				setTimer(0, greenTime * 1000); // Timer 1
 800028a:	4b45      	ldr	r3, [pc, #276]	; (80003a0 <fsm_automatic+0x254>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000292:	fb02 f303 	mul.w	r3, r2, r3
 8000296:	4619      	mov	r1, r3
 8000298:	2000      	movs	r0, #0
 800029a:	f000 fec3 	bl	8001024 <setTimer>
				countdownX = redTime - 1;
 800029e:	4b42      	ldr	r3, [pc, #264]	; (80003a8 <fsm_automatic+0x25c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	4a3f      	ldr	r2, [pc, #252]	; (80003a4 <fsm_automatic+0x258>)
 80002a6:	6013      	str	r3, [r2, #0]
				countdownY = greenTime - 1;
 80002a8:	4b3d      	ldr	r3, [pc, #244]	; (80003a0 <fsm_automatic+0x254>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <fsm_automatic+0x260>)
 80002b0:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 80002b2:	4b3f      	ldr	r3, [pc, #252]	; (80003b0 <fsm_automatic+0x264>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d118      	bne.n	80002ec <fsm_automatic+0x1a0>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 80002ba:	4b3a      	ldr	r3, [pc, #232]	; (80003a4 <fsm_automatic+0x258>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fe50 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(countdownY);
 80002c4:	4b39      	ldr	r3, [pc, #228]	; (80003ac <fsm_automatic+0x260>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fe7b 	bl	8000fc4 <updateBufferYLine>
				countdownX--;
 80002ce:	4b35      	ldr	r3, [pc, #212]	; (80003a4 <fsm_automatic+0x258>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a33      	ldr	r2, [pc, #204]	; (80003a4 <fsm_automatic+0x258>)
 80002d6:	6013      	str	r3, [r2, #0]
				countdownY--;
 80002d8:	4b34      	ldr	r3, [pc, #208]	; (80003ac <fsm_automatic+0x260>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	4a33      	ldr	r2, [pc, #204]	; (80003ac <fsm_automatic+0x260>)
 80002e0:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 80002e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 fe9c 	bl	8001024 <setTimer>
			}
			if (isButtonPressed(0)) {
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f911 	bl	8000514 <isButtonPressed>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	f000 80ae 	beq.w	8000456 <fsm_automatic+0x30a>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <fsm_automatic+0x250>)
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000300:	f242 7110 	movw	r1, #10000	; 0x2710
 8000304:	2002      	movs	r0, #2
 8000306:	f000 fe8d 	bl	8001024 <setTimer>
				clearTrafficLight();
 800030a:	f001 f889 	bl	8001420 <clearTrafficLight>
			}
			break;
 800030e:	e0a2      	b.n	8000456 <fsm_automatic+0x30a>
		}
		case RED_GREEN: {
			trafficRedGreen();
 8000310:	f000 ffb8 	bl	8001284 <trafficRedGreen>
			if (timer_flag[0] == 1) {
 8000314:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <fsm_automatic+0x264>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d111      	bne.n	8000340 <fsm_automatic+0x1f4>
				status = RED_AMBER;
 800031c:	4b1f      	ldr	r3, [pc, #124]	; (800039c <fsm_automatic+0x250>)
 800031e:	220e      	movs	r2, #14
 8000320:	601a      	str	r2, [r3, #0]
				setTimer(0, yellowTime * 1000); // Timer 1
 8000322:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <fsm_automatic+0x268>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800032a:	fb02 f303 	mul.w	r3, r2, r3
 800032e:	4619      	mov	r1, r3
 8000330:	2000      	movs	r0, #0
 8000332:	f000 fe77 	bl	8001024 <setTimer>
				countdownY = yellowTime - 1;
 8000336:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <fsm_automatic+0x268>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3b01      	subs	r3, #1
 800033c:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <fsm_automatic+0x260>)
 800033e:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <fsm_automatic+0x264>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d118      	bne.n	800037a <fsm_automatic+0x22e>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <fsm_automatic+0x258>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fe09 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <fsm_automatic+0x260>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fe34 	bl	8000fc4 <updateBufferYLine>
				countdownX--;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <fsm_automatic+0x258>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <fsm_automatic+0x258>)
 8000364:	6013      	str	r3, [r2, #0]
				countdownY--;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <fsm_automatic+0x260>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <fsm_automatic+0x260>)
 800036e:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 8000370:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000374:	2001      	movs	r0, #1
 8000376:	f000 fe55 	bl	8001024 <setTimer>
			}
			if (isButtonPressed(0)) {
 800037a:	2000      	movs	r0, #0
 800037c:	f000 f8ca 	bl	8000514 <isButtonPressed>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d069      	beq.n	800045a <fsm_automatic+0x30e>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <fsm_automatic+0x250>)
 8000388:	2202      	movs	r2, #2
 800038a:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 800038c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000390:	2002      	movs	r0, #2
 8000392:	f000 fe47 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000396:	f001 f843 	bl	8001420 <clearTrafficLight>
			}
			break;
 800039a:	e05e      	b.n	800045a <fsm_automatic+0x30e>
 800039c:	20000050 	.word	0x20000050
 80003a0:	20000020 	.word	0x20000020
 80003a4:	20000048 	.word	0x20000048
 80003a8:	20000018 	.word	0x20000018
 80003ac:	2000004c 	.word	0x2000004c
 80003b0:	20000218 	.word	0x20000218
 80003b4:	2000001c 	.word	0x2000001c
		}
		case RED_AMBER: {
			trafficRedYellow();
 80003b8:	f000 ff8e 	bl	80012d8 <trafficRedYellow>
			if (timer_flag[0] == 1) {
 80003bc:	4b29      	ldr	r3, [pc, #164]	; (8000464 <fsm_automatic+0x318>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d116      	bne.n	80003f2 <fsm_automatic+0x2a6>
				status = GREEN_RED;
 80003c4:	4b28      	ldr	r3, [pc, #160]	; (8000468 <fsm_automatic+0x31c>)
 80003c6:	220b      	movs	r2, #11
 80003c8:	601a      	str	r2, [r3, #0]
				setTimer(0, greenTime * 1000); // Timer 1
 80003ca:	4b28      	ldr	r3, [pc, #160]	; (800046c <fsm_automatic+0x320>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003d2:	fb02 f303 	mul.w	r3, r2, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 fe23 	bl	8001024 <setTimer>
				countdownX = greenTime - 1;
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <fsm_automatic+0x320>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a22      	ldr	r2, [pc, #136]	; (8000470 <fsm_automatic+0x324>)
 80003e6:	6013      	str	r3, [r2, #0]
				countdownY = redTime - 1;
 80003e8:	4b22      	ldr	r3, [pc, #136]	; (8000474 <fsm_automatic+0x328>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a22      	ldr	r2, [pc, #136]	; (8000478 <fsm_automatic+0x32c>)
 80003f0:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[1] == 1) {
 80003f2:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <fsm_automatic+0x318>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d118      	bne.n	800042c <fsm_automatic+0x2e0>
				//UPDATE DISPLAY
				updateBufferXLine(countdownX);
 80003fa:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <fsm_automatic+0x324>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fdb0 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(countdownY);
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <fsm_automatic+0x32c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fddb 	bl	8000fc4 <updateBufferYLine>
				countdownX--;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <fsm_automatic+0x324>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	4a16      	ldr	r2, [pc, #88]	; (8000470 <fsm_automatic+0x324>)
 8000416:	6013      	str	r3, [r2, #0]
				countdownY--;
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <fsm_automatic+0x32c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3b01      	subs	r3, #1
 800041e:	4a16      	ldr	r2, [pc, #88]	; (8000478 <fsm_automatic+0x32c>)
 8000420:	6013      	str	r3, [r2, #0]
				setTimer(1, 1000); // Timer 2
 8000422:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000426:	2001      	movs	r0, #1
 8000428:	f000 fdfc 	bl	8001024 <setTimer>
			}
			if (isButtonPressed(0)) {
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f871 	bl	8000514 <isButtonPressed>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d012      	beq.n	800045e <fsm_automatic+0x312>
//				Check button1_flag == 1, then reset button1_flag = 0
				status = MAN;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <fsm_automatic+0x31c>)
 800043a:	2202      	movs	r2, #2
 800043c:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 800043e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000442:	2002      	movs	r0, #2
 8000444:	f000 fdee 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000448:	f000 ffea 	bl	8001420 <clearTrafficLight>
			}
			break;
 800044c:	e007      	b.n	800045e <fsm_automatic+0x312>
		}
		default: {
			break;
 800044e:	bf00      	nop
 8000450:	e006      	b.n	8000460 <fsm_automatic+0x314>
			break;
 8000452:	bf00      	nop
 8000454:	e004      	b.n	8000460 <fsm_automatic+0x314>
			break;
 8000456:	bf00      	nop
 8000458:	e002      	b.n	8000460 <fsm_automatic+0x314>
			break;
 800045a:	bf00      	nop
 800045c:	e000      	b.n	8000460 <fsm_automatic+0x314>
			break;
 800045e:	bf00      	nop
		}
	}
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000218 	.word	0x20000218
 8000468:	20000050 	.word	0x20000050
 800046c:	20000020 	.word	0x20000020
 8000470:	20000048 	.word	0x20000048
 8000474:	20000018 	.word	0x20000018
 8000478:	2000004c 	.word	0x2000004c

0800047c <initButtons>:
int TimeOutForKeyPress[NUM_BUTTONS];
int button_pressed[NUM_BUTTONS];
int button_long_pressed[NUM_BUTTONS];
int button_flag[NUM_BUTTONS];

void initButtons() {
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_BUTTONS; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	e02b      	b.n	80004e0 <initButtons+0x64>
        KeyReg0[i] = NORMAL_STATE;
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <initButtons+0x78>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2101      	movs	r1, #1
 800048e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg1[i] = NORMAL_STATE;
 8000492:	4a19      	ldr	r2, [pc, #100]	; (80004f8 <initButtons+0x7c>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2101      	movs	r1, #1
 8000498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg2[i] = NORMAL_STATE;
 800049c:	4a17      	ldr	r2, [pc, #92]	; (80004fc <initButtons+0x80>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2101      	movs	r1, #1
 80004a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        KeyReg3[i] = NORMAL_STATE;
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <initButtons+0x84>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2101      	movs	r1, #1
 80004ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        TimeOutForKeyPress[i] = 500;
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <initButtons+0x88>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_pressed[i] = 0;
 80004bc:	4a12      	ldr	r2, [pc, #72]	; (8000508 <initButtons+0x8c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_long_pressed[i] = 0;
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <initButtons+0x90>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2100      	movs	r1, #0
 80004cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        button_flag[i] = 0;
 80004d0:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <initButtons+0x94>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3301      	adds	r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b09      	cmp	r3, #9
 80004e4:	ddd0      	ble.n	8000488 <initButtons+0xc>
    }
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	200000b8 	.word	0x200000b8
 80004fc:	20000158 	.word	0x20000158
 8000500:	20000068 	.word	0x20000068
 8000504:	200000e0 	.word	0x200000e0
 8000508:	20000130 	.word	0x20000130
 800050c:	20000180 	.word	0x20000180
 8000510:	20000108 	.word	0x20000108

08000514 <isButtonPressed>:

int isButtonPressed(int buttonIndex) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    if (button_flag[buttonIndex] == 1) {
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <isButtonPressed+0x30>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d106      	bne.n	8000536 <isButtonPressed+0x22>
        button_flag[buttonIndex] = 0;
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <isButtonPressed+0x30>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2100      	movs	r1, #0
 800052e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <isButtonPressed+0x24>
    }
    return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000108 	.word	0x20000108

08000548 <getKeyInput>:

void subKeyProcess(int buttonIndex) {
    button_flag[buttonIndex] = 1;
}

void getKeyInput() {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e012      	b.n	800057a <getKeyInput+0x32>
		KeyReg2[buttonIndex] = KeyReg1[buttonIndex];
 8000554:	4a49      	ldr	r2, [pc, #292]	; (800067c <getKeyInput+0x134>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055c:	4948      	ldr	r1, [pc, #288]	; (8000680 <getKeyInput+0x138>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[buttonIndex] = KeyReg0[buttonIndex];
 8000564:	4a47      	ldr	r2, [pc, #284]	; (8000684 <getKeyInput+0x13c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056c:	4943      	ldr	r1, [pc, #268]	; (800067c <getKeyInput+0x134>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b09      	cmp	r3, #9
 800057e:	dde9      	ble.n	8000554 <getKeyInput+0xc>
	}

    KeyReg0[0] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000580:	2104      	movs	r1, #4
 8000582:	4841      	ldr	r0, [pc, #260]	; (8000688 <getKeyInput+0x140>)
 8000584:	f001 fb22 	bl	8001bcc <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <getKeyInput+0x13c>)
 800058e:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 8000590:	2108      	movs	r1, #8
 8000592:	483d      	ldr	r0, [pc, #244]	; (8000688 <getKeyInput+0x140>)
 8000594:	f001 fb1a 	bl	8001bcc <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	4b39      	ldr	r3, [pc, #228]	; (8000684 <getKeyInput+0x13c>)
 800059e:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 80005a0:	2110      	movs	r1, #16
 80005a2:	4839      	ldr	r0, [pc, #228]	; (8000688 <getKeyInput+0x140>)
 80005a4:	f001 fb12 	bl	8001bcc <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b35      	ldr	r3, [pc, #212]	; (8000684 <getKeyInput+0x13c>)
 80005ae:	609a      	str	r2, [r3, #8]
//    KeyReg0[6] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//	  KeyReg0[7] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//    KeyReg0[8] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);
//    KeyReg0[9] = HAL_GPIO_ReadPin(GPIO_Port, GPIO_Pin);

    for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	e05a      	b.n	800066c <getKeyInput+0x124>
		if ((KeyReg1[buttonIndex] == KeyReg0[buttonIndex]) && (KeyReg1[buttonIndex] == KeyReg2[buttonIndex])) {
 80005b6:	4a31      	ldr	r2, [pc, #196]	; (800067c <getKeyInput+0x134>)
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005be:	4931      	ldr	r1, [pc, #196]	; (8000684 <getKeyInput+0x13c>)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d14d      	bne.n	8000666 <getKeyInput+0x11e>
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <getKeyInput+0x134>)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d2:	492b      	ldr	r1, [pc, #172]	; (8000680 <getKeyInput+0x138>)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d143      	bne.n	8000666 <getKeyInput+0x11e>
			if (KeyReg2[buttonIndex] != KeyReg3[buttonIndex]) {
 80005de:	4a28      	ldr	r2, [pc, #160]	; (8000680 <getKeyInput+0x138>)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e6:	4929      	ldr	r1, [pc, #164]	; (800068c <getKeyInput+0x144>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d019      	beq.n	8000626 <getKeyInput+0xde>
				KeyReg3[buttonIndex] = KeyReg2[buttonIndex];
 80005f2:	4a23      	ldr	r2, [pc, #140]	; (8000680 <getKeyInput+0x138>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fa:	4924      	ldr	r1, [pc, #144]	; (800068c <getKeyInput+0x144>)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[buttonIndex] == PRESSED_STATE) {
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <getKeyInput+0x144>)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d12b      	bne.n	8000666 <getKeyInput+0x11e>
					TimeOutForKeyPress[buttonIndex] = 500;
 800060e:	4a20      	ldr	r2, [pc, #128]	; (8000690 <getKeyInput+0x148>)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000616:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[buttonIndex] = 1;
 800061a:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <getKeyInput+0x14c>)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2101      	movs	r1, #1
 8000620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000624:	e01f      	b.n	8000666 <getKeyInput+0x11e>
				}
			}
			else {
				TimeOutForKeyPress[buttonIndex]--;
 8000626:	4a1a      	ldr	r2, [pc, #104]	; (8000690 <getKeyInput+0x148>)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	4917      	ldr	r1, [pc, #92]	; (8000690 <getKeyInput+0x148>)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[buttonIndex] == 0) {
 8000638:	4a15      	ldr	r2, [pc, #84]	; (8000690 <getKeyInput+0x148>)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d110      	bne.n	8000666 <getKeyInput+0x11e>
					TimeOutForKeyPress[buttonIndex] = 500;
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <getKeyInput+0x148>)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800064c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[buttonIndex] == PRESSED_STATE) {
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <getKeyInput+0x144>)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d104      	bne.n	8000666 <getKeyInput+0x11e>
						button_flag[buttonIndex] = 1;
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <getKeyInput+0x14c>)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2101      	movs	r1, #1
 8000662:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int buttonIndex = 0; buttonIndex < NUM_BUTTONS; buttonIndex++) {
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2b09      	cmp	r3, #9
 8000670:	dda1      	ble.n	80005b6 <getKeyInput+0x6e>
					}
				}
			}
		}
    }
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000b8 	.word	0x200000b8
 8000680:	20000158 	.word	0x20000158
 8000684:	20000090 	.word	0x20000090
 8000688:	40010800 	.word	0x40010800
 800068c:	20000068 	.word	0x20000068
 8000690:	200000e0 	.word	0x200000e0
 8000694:	20000108 	.word	0x20000108

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 ffac 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f828 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80006a4:	f000 f862 	bl	800076c <MX_TIM2_Init>
  MX_GPIO_Init();
 80006a8:	f000 f8ac 	bl	8000804 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <main+0x50>)
 80006ae:	f001 ff01 	bl	80024b4 <HAL_TIM_Base_Start_IT>
  initButtons(); //Init for button_array
 80006b2:	f7ff fee3 	bl	800047c <initButtons>
  setTimer(4, 1000);
 80006b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ba:	2004      	movs	r0, #4
 80006bc:	f000 fcb2 	bl	8001024 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic();
 80006c0:	f7ff fd44 	bl	800014c <fsm_automatic>
	  fsm_manual();
 80006c4:	f000 f924 	bl	8000910 <fsm_manual>
	  fsm_setting();
 80006c8:	f000 fab4 	bl	8000c34 <fsm_setting>
	  if (timer_flag[4] == 1) {
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <main+0x54>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d1f5      	bne.n	80006c0 <main+0x28>
		  setTimer(4, 1000);
 80006d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d8:	2004      	movs	r0, #4
 80006da:	f000 fca3 	bl	8001024 <setTimer>
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 80006de:	2120      	movs	r1, #32
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <main+0x58>)
 80006e2:	f001 faa2 	bl	8001c2a <HAL_GPIO_TogglePin>
	  fsm_automatic();
 80006e6:	e7eb      	b.n	80006c0 <main+0x28>
 80006e8:	200001a8 	.word	0x200001a8
 80006ec:	20000218 	.word	0x20000218
 80006f0:	40010800 	.word	0x40010800

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b090      	sub	sp, #64	; 0x40
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	2228      	movs	r2, #40	; 0x28
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fa86 	bl	8002c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000716:	2302      	movs	r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000722:	2300      	movs	r3, #0
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fa96 	bl	8001c5c <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000736:	f000 f8e5 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fd02 	bl	800215c <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800075e:	f000 f8d1 	bl	8000904 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3740      	adds	r7, #64	; 0x40
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_TIM2_Init+0x94>)
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_TIM2_Init+0x94>)
 8000792:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_TIM2_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_TIM2_Init+0x94>)
 80007a0:	2209      	movs	r2, #9
 80007a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_TIM2_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_TIM2_Init+0x94>)
 80007b2:	f001 fe2f 	bl	8002414 <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007bc:	f000 f8a2 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ce:	f001 ffad 	bl	800272c <HAL_TIM_ConfigClockSource>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 f894 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ea:	f002 f985 	bl	8002af8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007f4:	f000 f886 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200001a8 	.word	0x200001a8

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_GPIO_Init+0xb8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <MX_GPIO_Init+0xb8>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_GPIO_Init+0xb8>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOT_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <MX_GPIO_Init+0xbc>)
 8000850:	f001 f9d3 	bl	8001bfa <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|LEDR_Y_Pin
 8000854:	2200      	movs	r2, #0
 8000856:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800085a:	481a      	ldr	r0, [pc, #104]	; (80008c4 <MX_GPIO_Init+0xc0>)
 800085c:	f001 f9cd 	bl	8001bfa <HAL_GPIO_WritePin>
                          |LEDY_Y_Pin|LEDG_Y_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|LEDR_X_Pin|LEDY_X_Pin
                          |LEDG_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000860:	231c      	movs	r3, #28
 8000862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4619      	mov	r1, r3
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_GPIO_Init+0xbc>)
 8000874:	f001 f830 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOT_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = DOT_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000878:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800087c:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4619      	mov	r1, r3
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0xbc>)
 8000892:	f001 f821 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin LEDR_Y_Pin
                           LEDY_Y_Pin LEDG_Y_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin LEDR_X_Pin LEDY_X_Pin
                           LEDG_X_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|LEDR_Y_Pin
 8000896:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800089a:	60bb      	str	r3, [r7, #8]
                          |LEDY_Y_Pin|LEDG_Y_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|LEDR_X_Pin|LEDY_X_Pin
                          |LEDG_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4619      	mov	r1, r3
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_GPIO_Init+0xc0>)
 80008b0:	f001 f812 	bl	80018d8 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010800 	.word	0x40010800
 80008c4:	40010c00 	.word	0x40010c00

080008c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int idx = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	timerRun();
 80008d0:	f000 fbc6 	bl	8001060 <timerRun>
	getKeyInput();
 80008d4:	f7ff fe38 	bl	8000548 <getKeyInput>
	update7SEG(idx++);
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e0:	600a      	str	r2, [r1, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 faec 	bl	8000ec0 <update7SEG>
	if (idx >= 4){
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	dd02      	ble.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		idx = 0;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000054 	.word	0x20000054

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <fsm_manual>:
int mode = 0;
int redValue = 0;
int yellowValue = 0;
int greenValue = 0;

void fsm_manual() {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	switch(status) {
 8000914:	4bbe      	ldr	r3, [pc, #760]	; (8000c10 <fsm_manual+0x300>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b02      	subs	r3, #2
 800091a:	2b15      	cmp	r3, #21
 800091c:	f200 816c 	bhi.w	8000bf8 <fsm_manual+0x2e8>
 8000920:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <fsm_manual+0x18>)
 8000922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000926:	bf00      	nop
 8000928:	08000981 	.word	0x08000981
 800092c:	08000bf9 	.word	0x08000bf9
 8000930:	08000bf9 	.word	0x08000bf9
 8000934:	08000bf9 	.word	0x08000bf9
 8000938:	08000bf9 	.word	0x08000bf9
 800093c:	08000bf9 	.word	0x08000bf9
 8000940:	08000bf9 	.word	0x08000bf9
 8000944:	08000bf9 	.word	0x08000bf9
 8000948:	08000bf9 	.word	0x08000bf9
 800094c:	08000bf9 	.word	0x08000bf9
 8000950:	08000bf9 	.word	0x08000bf9
 8000954:	08000bf9 	.word	0x08000bf9
 8000958:	08000bf9 	.word	0x08000bf9
 800095c:	08000bf9 	.word	0x08000bf9
 8000960:	08000bf9 	.word	0x08000bf9
 8000964:	08000bf9 	.word	0x08000bf9
 8000968:	08000bf9 	.word	0x08000bf9
 800096c:	08000bf9 	.word	0x08000bf9
 8000970:	08000bf9 	.word	0x08000bf9
 8000974:	080009f3 	.word	0x080009f3
 8000978:	08000a9f 	.word	0x08000a9f
 800097c:	08000b49 	.word	0x08000b49
		case MAN: {
			updateBufferXLine(mode);
 8000980:	4ba4      	ldr	r3, [pc, #656]	; (8000c14 <fsm_manual+0x304>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 faed 	bl	8000f64 <updateBufferXLine>
			updateBufferYLine(0);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 fb1a 	bl	8000fc4 <updateBufferYLine>
			if (timer_flag[3] == 1) {
 8000990:	4ba1      	ldr	r3, [pc, #644]	; (8000c18 <fsm_manual+0x308>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d106      	bne.n	80009a6 <fsm_manual+0x96>
				setTimer(3, 500); // Timer 4
 8000998:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800099c:	2003      	movs	r0, #3
 800099e:	f000 fb41 	bl	8001024 <setTimer>
				blinkAllLed(); // Blink 2Hz
 80009a2:	f000 fddf 	bl	8001564 <blinkAllLed>
			}
			if (isButtonPressed(0)) {
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fdb4 	bl	8000514 <isButtonPressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 8124 	beq.w	8000bfc <fsm_manual+0x2ec>
				status = MODE2;
 80009b4:	4b96      	ldr	r3, [pc, #600]	; (8000c10 <fsm_manual+0x300>)
 80009b6:	2215      	movs	r2, #21
 80009b8:	601a      	str	r2, [r3, #0]
				mode = 2;
 80009ba:	4b96      	ldr	r3, [pc, #600]	; (8000c14 <fsm_manual+0x304>)
 80009bc:	2202      	movs	r2, #2
 80009be:	601a      	str	r2, [r3, #0]
				// Save original values
				redValue = redTime;
 80009c0:	4b96      	ldr	r3, [pc, #600]	; (8000c1c <fsm_manual+0x30c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a96      	ldr	r2, [pc, #600]	; (8000c20 <fsm_manual+0x310>)
 80009c6:	6013      	str	r3, [r2, #0]
				yellowValue = yellowTime;
 80009c8:	4b96      	ldr	r3, [pc, #600]	; (8000c24 <fsm_manual+0x314>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a96      	ldr	r2, [pc, #600]	; (8000c28 <fsm_manual+0x318>)
 80009ce:	6013      	str	r3, [r2, #0]
				greenValue = greenTime;
 80009d0:	4b96      	ldr	r3, [pc, #600]	; (8000c2c <fsm_manual+0x31c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a96      	ldr	r2, [pc, #600]	; (8000c30 <fsm_manual+0x320>)
 80009d6:	6013      	str	r3, [r2, #0]
				updateBufferXLine(mode);
 80009d8:	4b8e      	ldr	r3, [pc, #568]	; (8000c14 <fsm_manual+0x304>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fac1 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(redTime);
 80009e2:	4b8e      	ldr	r3, [pc, #568]	; (8000c1c <fsm_manual+0x30c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 faec 	bl	8000fc4 <updateBufferYLine>
				clearTrafficLight();
 80009ec:	f000 fd18 	bl	8001420 <clearTrafficLight>
			}
			break;
 80009f0:	e104      	b.n	8000bfc <fsm_manual+0x2ec>
		}
		case MODE2: {
			if (timer_flag[3] == 1) {
 80009f2:	4b89      	ldr	r3, [pc, #548]	; (8000c18 <fsm_manual+0x308>)
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d106      	bne.n	8000a08 <fsm_manual+0xf8>
				setTimer(3, 500); // Timer 4
 80009fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009fe:	2003      	movs	r0, #3
 8000a00:	f000 fb10 	bl	8001024 <setTimer>
				blinkRedLed(); // Blink 2Hz
 8000a04:	f000 fd36 	bl	8001474 <blinkRedLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fd83 	bl	8000514 <isButtonPressed>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d021      	beq.n	8000a58 <fsm_manual+0x148>
				status = MODE3;
 8000a14:	4b7e      	ldr	r3, [pc, #504]	; (8000c10 <fsm_manual+0x300>)
 8000a16:	2216      	movs	r2, #22
 8000a18:	601a      	str	r2, [r3, #0]
				mode = 3;
 8000a1a:	4b7e      	ldr	r3, [pc, #504]	; (8000c14 <fsm_manual+0x304>)
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8000a20:	4b7f      	ldr	r3, [pc, #508]	; (8000c20 <fsm_manual+0x310>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fcd1 	bl	80013cc <setRedTime>
				setYellowTime(yellowValue);
 8000a2a:	4b7f      	ldr	r3, [pc, #508]	; (8000c28 <fsm_manual+0x318>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fcda 	bl	80013e8 <setYellowTime>
				setGreenTime(greenValue);
 8000a34:	4b7e      	ldr	r3, [pc, #504]	; (8000c30 <fsm_manual+0x320>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fce3 	bl	8001404 <setGreenTime>
				updateBufferXLine(mode);
 8000a3e:	4b75      	ldr	r3, [pc, #468]	; (8000c14 <fsm_manual+0x304>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fa8e 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(yellowTime);
 8000a48:	4b76      	ldr	r3, [pc, #472]	; (8000c24 <fsm_manual+0x314>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fab9 	bl	8000fc4 <updateBufferYLine>
				clearTrafficLight();
 8000a52:	f000 fce5 	bl	8001420 <clearTrafficLight>
				break;
 8000a56:	e0d8      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fd5b 	bl	8000514 <isButtonPressed>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <fsm_manual+0x164>
				updateRedTime();
 8000a64:	f000 fc62 	bl	800132c <updateRedTime>
				updateBufferYLine(redTime);
 8000a68:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <fsm_manual+0x30c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 faa9 	bl	8000fc4 <updateBufferYLine>
				break;
 8000a72:	e0ca      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 8000a74:	2002      	movs	r0, #2
 8000a76:	f7ff fd4d 	bl	8000514 <isButtonPressed>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80bf 	beq.w	8000c00 <fsm_manual+0x2f0>
				status = MAN;
 8000a82:	4b63      	ldr	r3, [pc, #396]	; (8000c10 <fsm_manual+0x300>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000a88:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f000 fac9 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000a92:	f000 fcc5 	bl	8001420 <clearTrafficLight>
				mode = 0;
 8000a96:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <fsm_manual+0x304>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
				break;
 8000a9c:	e0b5      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			break;
		}
		case MODE3: {
			if (timer_flag[3] == 1) {
 8000a9e:	4b5e      	ldr	r3, [pc, #376]	; (8000c18 <fsm_manual+0x308>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d106      	bne.n	8000ab4 <fsm_manual+0x1a4>
				setTimer(3, 500); // Timer 4
 8000aa6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f000 faba 	bl	8001024 <setTimer>
				blinkYellowLed(); // Blink 2Hz
 8000ab0:	f000 fd08 	bl	80014c4 <blinkYellowLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fd2d 	bl	8000514 <isButtonPressed>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d021      	beq.n	8000b04 <fsm_manual+0x1f4>
				status = MODE4;
 8000ac0:	4b53      	ldr	r3, [pc, #332]	; (8000c10 <fsm_manual+0x300>)
 8000ac2:	2217      	movs	r2, #23
 8000ac4:	601a      	str	r2, [r3, #0]
				mode = 4;
 8000ac6:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <fsm_manual+0x304>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8000acc:	4b54      	ldr	r3, [pc, #336]	; (8000c20 <fsm_manual+0x310>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fc7b 	bl	80013cc <setRedTime>
				setYellowTime(yellowValue);
 8000ad6:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <fsm_manual+0x318>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fc84 	bl	80013e8 <setYellowTime>
				setGreenTime(greenValue);
 8000ae0:	4b53      	ldr	r3, [pc, #332]	; (8000c30 <fsm_manual+0x320>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fc8d 	bl	8001404 <setGreenTime>
				updateBufferXLine(mode);
 8000aea:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <fsm_manual+0x304>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fa38 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(greenTime);
 8000af4:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <fsm_manual+0x31c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fa63 	bl	8000fc4 <updateBufferYLine>
				clearTrafficLight();
 8000afe:	f000 fc8f 	bl	8001420 <clearTrafficLight>
				break;
 8000b02:	e082      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fd05 	bl	8000514 <isButtonPressed>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d007      	beq.n	8000b20 <fsm_manual+0x210>
				updateYellowTime();
 8000b10:	f000 fc3c 	bl	800138c <updateYellowTime>
				updateBufferYLine(yellowTime);
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <fsm_manual+0x314>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fa53 	bl	8000fc4 <updateBufferYLine>
				break;
 8000b1e:	e074      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff fcf7 	bl	8000514 <isButtonPressed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d06b      	beq.n	8000c04 <fsm_manual+0x2f4>
				status = MAN;
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <fsm_manual+0x300>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000b32:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b36:	2002      	movs	r0, #2
 8000b38:	f000 fa74 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000b3c:	f000 fc70 	bl	8001420 <clearTrafficLight>
				mode = 0;
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <fsm_manual+0x304>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
				break;
 8000b46:	e060      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			break;
		}
		case MODE4: {
			if (timer_flag[3] == 1) {
 8000b48:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <fsm_manual+0x308>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d106      	bne.n	8000b5e <fsm_manual+0x24e>
				setTimer(3, 500); // Timer 4
 8000b50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 fa65 	bl	8001024 <setTimer>
				blinkGreenLed(); // Blink 2Hz
 8000b5a:	f000 fcdb 	bl	8001514 <blinkGreenLed>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fcd8 	bl	8000514 <isButtonPressed>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d024      	beq.n	8000bb4 <fsm_manual+0x2a4>
				status = MAN;
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <fsm_manual+0x300>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000b70:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fa55 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000b7a:	f000 fc51 	bl	8001420 <clearTrafficLight>
				mode = 0;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <fsm_manual+0x304>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setRedTime(redValue);
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <fsm_manual+0x310>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fc1f 	bl	80013cc <setRedTime>
				setYellowTime(yellowValue);
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <fsm_manual+0x318>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fc28 	bl	80013e8 <setYellowTime>
				setGreenTime(greenValue);
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <fsm_manual+0x320>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fc31 	bl	8001404 <setGreenTime>
				updateBufferXLine(mode);
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <fsm_manual+0x304>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f9dc 	bl	8000f64 <updateBufferXLine>
				updateBufferYLine(0);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 fa09 	bl	8000fc4 <updateBufferYLine>
				break;
 8000bb2:	e02a      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fcad 	bl	8000514 <isButtonPressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d007      	beq.n	8000bd0 <fsm_manual+0x2c0>
				updateGreenTime();
 8000bc0:	f000 fbcc 	bl	800135c <updateGreenTime>
				updateBufferYLine(greenTime);
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <fsm_manual+0x31c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f9fb 	bl	8000fc4 <updateBufferYLine>
				break;
 8000bce:	e01c      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f7ff fc9f 	bl	8000514 <isButtonPressed>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d015      	beq.n	8000c08 <fsm_manual+0x2f8>
				status = MAN;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <fsm_manual+0x300>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000be2:	f242 7110 	movw	r1, #10000	; 0x2710
 8000be6:	2002      	movs	r0, #2
 8000be8:	f000 fa1c 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000bec:	f000 fc18 	bl	8001420 <clearTrafficLight>
				mode = 0;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <fsm_manual+0x304>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
				break;
 8000bf6:	e008      	b.n	8000c0a <fsm_manual+0x2fa>
			}
			break;
		}
		default: {
			break;
 8000bf8:	bf00      	nop
 8000bfa:	e006      	b.n	8000c0a <fsm_manual+0x2fa>
			break;
 8000bfc:	bf00      	nop
 8000bfe:	e004      	b.n	8000c0a <fsm_manual+0x2fa>
			break;
 8000c00:	bf00      	nop
 8000c02:	e002      	b.n	8000c0a <fsm_manual+0x2fa>
			break;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <fsm_manual+0x2fa>
			break;
 8000c08:	bf00      	nop
		}
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000050 	.word	0x20000050
 8000c14:	20000058 	.word	0x20000058
 8000c18:	20000218 	.word	0x20000218
 8000c1c:	20000018 	.word	0x20000018
 8000c20:	2000005c 	.word	0x2000005c
 8000c24:	2000001c 	.word	0x2000001c
 8000c28:	20000060 	.word	0x20000060
 8000c2c:	20000020 	.word	0x20000020
 8000c30:	20000064 	.word	0x20000064

08000c34 <fsm_setting>:
 *      Author: Thảo Quảng
 */

#include "setting.h"

void fsm_setting() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	switch(status) {
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <fsm_setting+0x80>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d020      	beq.n	8000c82 <fsm_setting+0x4e>
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	dc30      	bgt.n	8000ca6 <fsm_setting+0x72>
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <fsm_setting+0x1a>
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d004      	beq.n	8000c56 <fsm_setting+0x22>
				break;
			}
			break;
		}
		default: {
			break;
 8000c4c:	e02b      	b.n	8000ca6 <fsm_setting+0x72>
				status = AUTO;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <fsm_setting+0x80>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
			break;
 8000c54:	e02c      	b.n	8000cb0 <fsm_setting+0x7c>
			if (isButtonPressed(0)) {
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fc5c 	bl	8000514 <isButtonPressed>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d023      	beq.n	8000caa <fsm_setting+0x76>
				status = MAN;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <fsm_setting+0x80>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	601a      	str	r2, [r3, #0]
				setTimer(2, 10000); // Timer 3
 8000c68:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f000 f9d9 	bl	8001024 <setTimer>
				setTimer(3, 500); // Timer 4
 8000c72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c76:	2003      	movs	r0, #3
 8000c78:	f000 f9d4 	bl	8001024 <setTimer>
				clearTrafficLight();
 8000c7c:	f000 fbd0 	bl	8001420 <clearTrafficLight>
			break;
 8000c80:	e013      	b.n	8000caa <fsm_setting+0x76>
			if (isButtonPressed(2)) {
 8000c82:	2002      	movs	r0, #2
 8000c84:	f7ff fc46 	bl	8000514 <isButtonPressed>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <fsm_setting+0x62>
				status = AUTO;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <fsm_setting+0x80>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
				break;
 8000c94:	e00c      	b.n	8000cb0 <fsm_setting+0x7c>
			if (timer_flag[2] == 1) {
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <fsm_setting+0x84>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d107      	bne.n	8000cae <fsm_setting+0x7a>
				status = AUTO;
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <fsm_setting+0x80>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
				break;
 8000ca4:	e004      	b.n	8000cb0 <fsm_setting+0x7c>
			break;
 8000ca6:	bf00      	nop
 8000ca8:	e002      	b.n	8000cb0 <fsm_setting+0x7c>
			break;
 8000caa:	bf00      	nop
 8000cac:	e000      	b.n	8000cb0 <fsm_setting+0x7c>
			break;
 8000cae:	bf00      	nop
		}
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000050 	.word	0x20000050
 8000cb8:	20000218 	.word	0x20000218

08000cbc <resetAllDigits>:
 */


#include "seven_segment_led.h"
#include "software_timer.h"
void resetAllDigits(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <resetAllDigits+0x34>)
 8000cc6:	f000 ff98 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <resetAllDigits+0x34>)
 8000cd0:	f000 ff93 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <resetAllDigits+0x34>)
 8000cdc:	f000 ff8d 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce6:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <resetAllDigits+0x34>)
 8000ce8:	f000 ff87 	bl	8001bfa <HAL_GPIO_WritePin>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <setNum2Digit>:
			break;
		}
	}
}

void setNum2Digit(int a, int b, int c, int d, int e, int f, int g){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, a);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <setNum2Digit+0x78>)
 8000d0c:	f000 ff75 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, b);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461a      	mov	r2, r3
 8000d16:	2102      	movs	r1, #2
 8000d18:	4814      	ldr	r0, [pc, #80]	; (8000d6c <setNum2Digit+0x78>)
 8000d1a:	f000 ff6e 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, c);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	2104      	movs	r1, #4
 8000d26:	4811      	ldr	r0, [pc, #68]	; (8000d6c <setNum2Digit+0x78>)
 8000d28:	f000 ff67 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, d);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	2108      	movs	r1, #8
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <setNum2Digit+0x78>)
 8000d36:	f000 ff60 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, e);
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2110      	movs	r1, #16
 8000d42:	480a      	ldr	r0, [pc, #40]	; (8000d6c <setNum2Digit+0x78>)
 8000d44:	f000 ff59 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, f);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <setNum2Digit+0x78>)
 8000d52:	f000 ff52 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, g);
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	4803      	ldr	r0, [pc, #12]	; (8000d6c <setNum2Digit+0x78>)
 8000d60:	f000 ff4b 	bl	8001bfa <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <display7SEG>:

void display7SEG(int num){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af04      	add	r7, sp, #16
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	f200 809a 	bhi.w	8000eb4 <display7SEG+0x144>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <display7SEG+0x18>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	08000dcb 	.word	0x08000dcb
 8000d90:	08000de5 	.word	0x08000de5
 8000d94:	08000dff 	.word	0x08000dff
 8000d98:	08000e19 	.word	0x08000e19
 8000d9c:	08000e33 	.word	0x08000e33
 8000da0:	08000e4d 	.word	0x08000e4d
 8000da4:	08000e67 	.word	0x08000e67
 8000da8:	08000e81 	.word	0x08000e81
 8000dac:	08000e9b 	.word	0x08000e9b
    switch(num) {
		case 0: {
			setNum2Digit(0,0,0,0,0,0,1);
 8000db0:	2301      	movs	r3, #1
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff ff96 	bl	8000cf4 <setNum2Digit>
			break;
 8000dc8:	e075      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 1: {
			setNum2Digit(1,0,0,1,1,1,1);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff ff89 	bl	8000cf4 <setNum2Digit>
			break;
 8000de2:	e068      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 2: {
			setNum2Digit(0,0,1,0,0,1,0);
 8000de4:	2300      	movs	r3, #0
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	2300      	movs	r3, #0
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2300      	movs	r3, #0
 8000df2:	2201      	movs	r2, #1
 8000df4:	2100      	movs	r1, #0
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff ff7c 	bl	8000cf4 <setNum2Digit>
			break;
 8000dfc:	e05b      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 3: {
			setNum2Digit(0,0,0,0,1,1,0);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	2301      	movs	r3, #1
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff ff6f 	bl	8000cf4 <setNum2Digit>
			break;
 8000e16:	e04e      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 4: {
			setNum2Digit(1,0,0,1,1,0,0);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	2301      	movs	r3, #1
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f7ff ff62 	bl	8000cf4 <setNum2Digit>
			break;
 8000e30:	e041      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 5: {
			setNum2Digit(0,1,0,0,1,0,0);
 8000e32:	2300      	movs	r3, #0
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2200      	movs	r2, #0
 8000e42:	2101      	movs	r1, #1
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff ff55 	bl	8000cf4 <setNum2Digit>
			break;
 8000e4a:	e034      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 6: {
			setNum2Digit(0,1,0,0,0,0,0);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2300      	movs	r3, #0
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2300      	movs	r3, #0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ff48 	bl	8000cf4 <setNum2Digit>
			break;
 8000e64:	e027      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 7: {
			setNum2Digit(0,0,0,1,1,1,1);
 8000e66:	2301      	movs	r3, #1
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff ff3b 	bl	8000cf4 <setNum2Digit>
			break;
 8000e7e:	e01a      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 8: {
			setNum2Digit(0,0,0,0,0,0,0);
 8000e80:	2300      	movs	r3, #0
 8000e82:	9302      	str	r3, [sp, #8]
 8000e84:	2300      	movs	r3, #0
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ff2e 	bl	8000cf4 <setNum2Digit>
			break;
 8000e98:	e00d      	b.n	8000eb6 <display7SEG+0x146>
		}
		case 9: {
			setNum2Digit(0,0,0,0,1,0,0);
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff ff21 	bl	8000cf4 <setNum2Digit>
			break;
 8000eb2:	e000      	b.n	8000eb6 <display7SEG+0x146>
		}
		default: {
			break;
 8000eb4:	bf00      	nop
		}
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop

08000ec0 <update7SEG>:

//const int MAX_LED = 4;
//int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d840      	bhi.n	8000f50 <update7SEG+0x90>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <update7SEG+0x14>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000eff 	.word	0x08000eff
 8000edc:	08000f19 	.word	0x08000f19
 8000ee0:	08000f35 	.word	0x08000f35
    switch (index) {
        case 0:{
            // Display the first 7 SEG with led_buffer[0]
        	resetAllDigits();
 8000ee4:	f7ff feea 	bl	8000cbc <resetAllDigits>
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <update7SEG+0x9c>)
 8000eee:	f000 fe84 	bl	8001bfa <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[0]);
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <update7SEG+0xa0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff3a 	bl	8000d70 <display7SEG>
            break;
 8000efc:	e029      	b.n	8000f52 <update7SEG+0x92>
        }
        case 1:{
            // Display the second 7 SEG with led_buffer[1]
        	resetAllDigits();
 8000efe:	f7ff fedd 	bl	8000cbc <resetAllDigits>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	4815      	ldr	r0, [pc, #84]	; (8000f5c <update7SEG+0x9c>)
 8000f08:	f000 fe77 	bl	8001bfa <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[1]);
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <update7SEG+0xa0>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff2d 	bl	8000d70 <display7SEG>
            break;
 8000f16:	e01c      	b.n	8000f52 <update7SEG+0x92>
        }
        case 2:{
            // Display the third 7 SEG with led_buffer[2]
        	resetAllDigits();
 8000f18:	f7ff fed0 	bl	8000cbc <resetAllDigits>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <update7SEG+0x9c>)
 8000f24:	f000 fe69 	bl	8001bfa <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[2]);
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <update7SEG+0xa0>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff1f 	bl	8000d70 <display7SEG>
            break;
 8000f32:	e00e      	b.n	8000f52 <update7SEG+0x92>
        }
        case 3:{
            // Display the fourth 7 SEG with led_buffer[3]
        	resetAllDigits();
 8000f34:	f7ff fec2 	bl	8000cbc <resetAllDigits>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <update7SEG+0x9c>)
 8000f40:	f000 fe5b 	bl	8001bfa <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[3]);
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <update7SEG+0xa0>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff11 	bl	8000d70 <display7SEG>
            break;
 8000f4e:	e000      	b.n	8000f52 <update7SEG+0x92>
        }
        default:{
            break;
 8000f50:	bf00      	nop
        }
    }
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	20000000 	.word	0x20000000

08000f64 <updateBufferXLine>:

void updateBufferXLine(int value) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	led_buffer[0] = (value / 10) % 10;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <updateBufferXLine+0x58>)
 8000f70:	fb82 1203 	smull	r1, r2, r2, r3
 8000f74:	1092      	asrs	r2, r2, #2
 8000f76:	17db      	asrs	r3, r3, #31
 8000f78:	1ad1      	subs	r1, r2, r3
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <updateBufferXLine+0x58>)
 8000f7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000f80:	109a      	asrs	r2, r3, #2
 8000f82:	17cb      	asrs	r3, r1, #31
 8000f84:	1ad2      	subs	r2, r2, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	1aca      	subs	r2, r1, r3
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <updateBufferXLine+0x5c>)
 8000f92:	601a      	str	r2, [r3, #0]
	led_buffer[1]= value % 10;
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <updateBufferXLine+0x58>)
 8000f98:	fb83 2301 	smull	r2, r3, r3, r1
 8000f9c:	109a      	asrs	r2, r3, #2
 8000f9e:	17cb      	asrs	r3, r1, #31
 8000fa0:	1ad2      	subs	r2, r2, r3
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	1aca      	subs	r2, r1, r3
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <updateBufferXLine+0x5c>)
 8000fae:	605a      	str	r2, [r3, #4]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	66666667 	.word	0x66666667
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <updateBufferYLine>:
void updateBufferYLine(int value) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	led_buffer[2] = (value / 10) % 10;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <updateBufferYLine+0x58>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1092      	asrs	r2, r2, #2
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1ad1      	subs	r1, r2, r3
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <updateBufferYLine+0x58>)
 8000fdc:	fb83 2301 	smull	r2, r3, r3, r1
 8000fe0:	109a      	asrs	r2, r3, #2
 8000fe2:	17cb      	asrs	r3, r1, #31
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	1aca      	subs	r2, r1, r3
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <updateBufferYLine+0x5c>)
 8000ff2:	609a      	str	r2, [r3, #8]
	led_buffer[3]= value % 10;
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <updateBufferYLine+0x58>)
 8000ff8:	fb83 2301 	smull	r2, r3, r3, r1
 8000ffc:	109a      	asrs	r2, r3, #2
 8000ffe:	17cb      	asrs	r3, r1, #31
 8001000:	1ad2      	subs	r2, r2, r3
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	1aca      	subs	r2, r1, r3
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <updateBufferYLine+0x5c>)
 800100e:	60da      	str	r2, [r3, #12]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	66666667 	.word	0x66666667
 8001020:	20000000 	.word	0x20000000

08001024 <setTimer>:
#include "software_timer.h"

int timer_flag[10];
int timer_counter[10];
int TIMER_CYCLE = 10;
void setTimer(int index, int counter){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <setTimer+0x30>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2100      	movs	r1, #0
 8001034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TIMER_CYCLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <setTimer+0x34>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001042:	4906      	ldr	r1, [pc, #24]	; (800105c <setTimer+0x38>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000218 	.word	0x20000218
 8001058:	20000010 	.word	0x20000010
 800105c:	200001f0 	.word	0x200001f0

08001060 <timerRun>:
void timerRun(){
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e01c      	b.n	80010a6 <timerRun+0x46>
		if (timer_counter[i] >= 0) {
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <timerRun+0x58>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db13      	blt.n	80010a0 <timerRun+0x40>
			timer_counter[i]--;
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <timerRun+0x58>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <timerRun+0x58>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <timerRun+0x58>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	dc04      	bgt.n	80010a0 <timerRun+0x40>
				timer_flag[i] = 1;
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <timerRun+0x5c>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2101      	movs	r1, #1
 800109c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	dddf      	ble.n	800106c <timerRun+0xc>
			}
		}
	}
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	200001f0 	.word	0x200001f0
 80010bc:	20000218 	.word	0x20000218

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_MspInit+0x5c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_MspInit+0x5c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_MspInit+0x5c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_MspInit+0x5c>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_MspInit+0x5c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_MspInit+0x5c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_MspInit+0x60>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_MspInit+0x60>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000

08001124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001134:	d113      	bne.n	800115e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_TIM_Base_MspInit+0x44>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <HAL_TIM_Base_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_TIM_Base_MspInit+0x44>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	201c      	movs	r0, #28
 8001154:	f000 fb89 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001158:	201c      	movs	r0, #28
 800115a:	f000 fba2 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b2:	f000 fa67 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM2_IRQHandler+0x10>)
 80011c2:	f001 f9c3 	bl	800254c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001a8 	.word	0x200001a8

080011d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <trafficGreenRed>:

int redTime = 5;
int yellowTime = 2;
int greenTime = 3;

void trafficGreenRed() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDR_X_GPIO_Port, LEDR_X_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <trafficGreenRed+0x50>)
 80011e6:	f000 fd08 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_X_GPIO_Port, LEDY_X_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f0:	480e      	ldr	r0, [pc, #56]	; (800122c <trafficGreenRed+0x50>)
 80011f2:	f000 fd02 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_X_GPIO_Port, LEDG_X_Pin, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <trafficGreenRed+0x50>)
 80011fe:	f000 fcfc 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <trafficGreenRed+0x50>)
 800120a:	f000 fcf6 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <trafficGreenRed+0x50>)
 8001216:	f000 fcf0 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <trafficGreenRed+0x50>)
 8001222:	f000 fcea 	bl	8001bfa <HAL_GPIO_WritePin>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010c00 	.word	0x40010c00

08001230 <trafficYellowRed>:
void trafficYellowRed() {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDR_X_GPIO_Port, LEDR_X_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2180      	movs	r1, #128	; 0x80
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <trafficYellowRed+0x50>)
 800123a:	f000 fcde 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_X_GPIO_Port, LEDY_X_Pin, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <trafficYellowRed+0x50>)
 8001246:	f000 fcd8 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_X_GPIO_Port, LEDG_X_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <trafficYellowRed+0x50>)
 8001252:	f000 fcd2 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <trafficYellowRed+0x50>)
 800125e:	f000 fccc 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <trafficYellowRed+0x50>)
 800126a:	f000 fcc6 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <trafficYellowRed+0x50>)
 8001276:	f000 fcc0 	bl	8001bfa <HAL_GPIO_WritePin>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40010c00 	.word	0x40010c00

08001284 <trafficRedGreen>:
void trafficRedGreen() {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDR_X_GPIO_Port, LEDR_X_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	4811      	ldr	r0, [pc, #68]	; (80012d4 <trafficRedGreen+0x50>)
 800128e:	f000 fcb4 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_X_GPIO_Port, LEDY_X_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <trafficRedGreen+0x50>)
 800129a:	f000 fcae 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_X_GPIO_Port, LEDG_X_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <trafficRedGreen+0x50>)
 80012a6:	f000 fca8 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <trafficRedGreen+0x50>)
 80012b2:	f000 fca2 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <trafficRedGreen+0x50>)
 80012be:	f000 fc9c 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <trafficRedGreen+0x50>)
 80012ca:	f000 fc96 	bl	8001bfa <HAL_GPIO_WritePin>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010c00 	.word	0x40010c00

080012d8 <trafficRedYellow>:
void trafficRedYellow() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDR_X_GPIO_Port, LEDR_X_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <trafficRedYellow+0x50>)
 80012e2:	f000 fc8a 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_X_GPIO_Port, LEDY_X_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ec:	480e      	ldr	r0, [pc, #56]	; (8001328 <trafficRedYellow+0x50>)
 80012ee:	f000 fc84 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_X_GPIO_Port, LEDG_X_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <trafficRedYellow+0x50>)
 80012fa:	f000 fc7e 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	4808      	ldr	r0, [pc, #32]	; (8001328 <trafficRedYellow+0x50>)
 8001306:	f000 fc78 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <trafficRedYellow+0x50>)
 8001312:	f000 fc72 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <trafficRedYellow+0x50>)
 800131e:	f000 fc6c 	bl	8001bfa <HAL_GPIO_WritePin>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40010c00 	.word	0x40010c00

0800132c <updateRedTime>:

void updateRedTime() {
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <updateRedTime+0x28>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b62      	cmp	r3, #98	; 0x62
 8001336:	dc09      	bgt.n	800134c <updateRedTime+0x20>
		redTime++;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <updateRedTime+0x28>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <updateRedTime+0x28>)
 8001340:	6013      	str	r3, [r2, #0]
		greenTime++;
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <updateRedTime+0x2c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a03      	ldr	r2, [pc, #12]	; (8001358 <updateRedTime+0x2c>)
 800134a:	6013      	str	r3, [r2, #0]
	}
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000018 	.word	0x20000018
 8001358:	20000020 	.word	0x20000020

0800135c <updateGreenTime>:
void updateGreenTime() {
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	if (redTime < 99) {
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <updateGreenTime+0x28>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b62      	cmp	r3, #98	; 0x62
 8001366:	dc09      	bgt.n	800137c <updateGreenTime+0x20>
		greenTime++;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <updateGreenTime+0x2c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a06      	ldr	r2, [pc, #24]	; (8001388 <updateGreenTime+0x2c>)
 8001370:	6013      	str	r3, [r2, #0]
		redTime++;
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <updateGreenTime+0x28>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a02      	ldr	r2, [pc, #8]	; (8001384 <updateGreenTime+0x28>)
 800137a:	6013      	str	r3, [r2, #0]
	}
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	20000018 	.word	0x20000018
 8001388:	20000020 	.word	0x20000020

0800138c <updateYellowTime>:
void updateYellowTime() {
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	if (redTime < 99 && yellowTime < greenTime) {
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <updateYellowTime+0x34>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b62      	cmp	r3, #98	; 0x62
 8001396:	dc0f      	bgt.n	80013b8 <updateYellowTime+0x2c>
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <updateYellowTime+0x38>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <updateYellowTime+0x3c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	da09      	bge.n	80013b8 <updateYellowTime+0x2c>
		yellowTime++;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <updateYellowTime+0x38>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <updateYellowTime+0x38>)
 80013ac:	6013      	str	r3, [r2, #0]
		redTime++;
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <updateYellowTime+0x34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a02      	ldr	r2, [pc, #8]	; (80013c0 <updateYellowTime+0x34>)
 80013b6:	6013      	str	r3, [r2, #0]
	}
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000018 	.word	0x20000018
 80013c4:	2000001c 	.word	0x2000001c
 80013c8:	20000020 	.word	0x20000020

080013cc <setRedTime>:

void setRedTime(int redValue) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	redTime = redValue;
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <setRedTime+0x18>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000018 	.word	0x20000018

080013e8 <setYellowTime>:
void setYellowTime(int yellowValue) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	yellowTime = yellowValue;
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <setYellowTime+0x18>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	2000001c 	.word	0x2000001c

08001404 <setGreenTime>:
void setGreenTime(int greenValue) {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	greenTime = greenValue;
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <setGreenTime+0x18>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	20000020 	.word	0x20000020

08001420 <clearTrafficLight>:

void clearTrafficLight() {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDR_X_GPIO_Port, LEDR_X_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <clearTrafficLight+0x50>)
 800142a:	f000 fbe6 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_X_GPIO_Port, LEDY_X_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001434:	480e      	ldr	r0, [pc, #56]	; (8001470 <clearTrafficLight+0x50>)
 8001436:	f000 fbe0 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_X_GPIO_Port, LEDG_X_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <clearTrafficLight+0x50>)
 8001442:	f000 fbda 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <clearTrafficLight+0x50>)
 800144e:	f000 fbd4 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <clearTrafficLight+0x50>)
 800145a:	f000 fbce 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <clearTrafficLight+0x50>)
 8001466:	f000 fbc8 	bl	8001bfa <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40010c00 	.word	0x40010c00

08001474 <blinkRedLed>:

void blinkRedLed() {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDR_X_GPIO_Port, LEDR_X_Pin);
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	4811      	ldr	r0, [pc, #68]	; (80014c0 <blinkRedLed+0x4c>)
 800147c:	f000 fbd5 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin);
 8001480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001484:	480e      	ldr	r0, [pc, #56]	; (80014c0 <blinkRedLed+0x4c>)
 8001486:	f000 fbd0 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDY_X_GPIO_Port, LEDY_X_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <blinkRedLed+0x4c>)
 8001492:	f000 fbb2 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_X_GPIO_Port, LEDG_X_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <blinkRedLed+0x4c>)
 800149e:	f000 fbac 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <blinkRedLed+0x4c>)
 80014aa:	f000 fba6 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <blinkRedLed+0x4c>)
 80014b6:	f000 fba0 	bl	8001bfa <HAL_GPIO_WritePin>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40010c00 	.word	0x40010c00

080014c4 <blinkYellowLed>:
void blinkYellowLed() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDY_X_GPIO_Port, LEDY_X_Pin);
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <blinkYellowLed+0x4c>)
 80014ce:	f000 fbac 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin);
 80014d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <blinkYellowLed+0x4c>)
 80014d8:	f000 fba7 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDR_X_GPIO_Port, LEDR_X_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <blinkYellowLed+0x4c>)
 80014e2:	f000 fb8a 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_X_GPIO_Port, LEDG_X_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <blinkYellowLed+0x4c>)
 80014ee:	f000 fb84 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <blinkYellowLed+0x4c>)
 80014fa:	f000 fb7e 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <blinkYellowLed+0x4c>)
 8001506:	f000 fb78 	bl	8001bfa <HAL_GPIO_WritePin>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010c00 	.word	0x40010c00

08001514 <blinkGreenLed>:
void blinkGreenLed() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDG_X_GPIO_Port, LEDG_X_Pin);
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <blinkGreenLed+0x4c>)
 800151e:	f000 fb84 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin);
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <blinkGreenLed+0x4c>)
 8001528:	f000 fb7f 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LEDR_X_GPIO_Port, LEDR_X_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <blinkGreenLed+0x4c>)
 8001532:	f000 fb62 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_X_GPIO_Port, LEDY_X_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153c:	4808      	ldr	r0, [pc, #32]	; (8001560 <blinkGreenLed+0x4c>)
 800153e:	f000 fb5c 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <blinkGreenLed+0x4c>)
 800154a:	f000 fb56 	bl	8001bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <blinkGreenLed+0x4c>)
 8001556:	f000 fb50 	bl	8001bfa <HAL_GPIO_WritePin>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010c00 	.word	0x40010c00

08001564 <blinkAllLed>:

void blinkAllLed() {
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDR_X_GPIO_Port, LEDR_X_Pin);
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	480f      	ldr	r0, [pc, #60]	; (80015a8 <blinkAllLed+0x44>)
 800156c:	f000 fb5d 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDR_Y_GPIO_Port, LEDR_Y_Pin);
 8001570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <blinkAllLed+0x44>)
 8001576:	f000 fb58 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDY_X_GPIO_Port, LEDY_X_Pin);
 800157a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <blinkAllLed+0x44>)
 8001580:	f000 fb53 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDY_Y_GPIO_Port, LEDY_Y_Pin);
 8001584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <blinkAllLed+0x44>)
 800158a:	f000 fb4e 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDG_X_GPIO_Port, LEDG_X_Pin);
 800158e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <blinkAllLed+0x44>)
 8001594:	f000 fb49 	bl	8001c2a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LEDG_Y_GPIO_Port, LEDG_Y_Pin);
 8001598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <blinkAllLed+0x44>)
 800159e:	f000 fb44 	bl	8001c2a <HAL_GPIO_TogglePin>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40010c00 	.word	0x40010c00

080015ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ac:	f7ff fe10 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b2:	490c      	ldr	r1, [pc, #48]	; (80015e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015c8:	4c09      	ldr	r4, [pc, #36]	; (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f001 faf9 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7ff f85d 	bl	8000698 <main>
  bx lr
 80015de:	4770      	bx	lr
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80015e8:	08002c68 	.word	0x08002c68
  ldr r2, =_sbss
 80015ec:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80015f0:	20000244 	.word	0x20000244

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f923 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fd54 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f93b 	bl	80018be <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f903 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000014 	.word	0x20000014
 800167c:	20000028 	.word	0x20000028
 8001680:	20000024 	.word	0x20000024

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_IncTick+0x20>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000028 	.word	0x20000028
 80016a4:	20000240 	.word	0x20000240

080016a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000240 	.word	0x20000240

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	db0b      	blt.n	800174a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	f003 021f 	and.w	r2, r3, #31
 8001738:	4906      	ldr	r1, [pc, #24]	; (8001754 <__NVIC_EnableIRQ+0x34>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	2001      	movs	r0, #1
 8001742:	fa00 f202 	lsl.w	r2, r0, r2
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	; (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff90 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff2d 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff42 	bl	8001704 <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff90 	bl	80017ac <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5f 	bl	8001758 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff35 	bl	8001720 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b08b      	sub	sp, #44	; 0x2c
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ea:	e148      	b.n	8001b7e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018ec:	2201      	movs	r2, #1
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 8137 	bne.w	8001b78 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4aa3      	ldr	r2, [pc, #652]	; (8001b9c <HAL_GPIO_Init+0x2c4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d05e      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001914:	4aa1      	ldr	r2, [pc, #644]	; (8001b9c <HAL_GPIO_Init+0x2c4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d875      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800191a:	4aa1      	ldr	r2, [pc, #644]	; (8001ba0 <HAL_GPIO_Init+0x2c8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d058      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001920:	4a9f      	ldr	r2, [pc, #636]	; (8001ba0 <HAL_GPIO_Init+0x2c8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d86f      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001926:	4a9f      	ldr	r2, [pc, #636]	; (8001ba4 <HAL_GPIO_Init+0x2cc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d052      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 800192c:	4a9d      	ldr	r2, [pc, #628]	; (8001ba4 <HAL_GPIO_Init+0x2cc>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d869      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001932:	4a9d      	ldr	r2, [pc, #628]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04c      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001938:	4a9b      	ldr	r2, [pc, #620]	; (8001ba8 <HAL_GPIO_Init+0x2d0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d863      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800193e:	4a9b      	ldr	r2, [pc, #620]	; (8001bac <HAL_GPIO_Init+0x2d4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d046      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001944:	4a99      	ldr	r2, [pc, #612]	; (8001bac <HAL_GPIO_Init+0x2d4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d85d      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d82a      	bhi.n	80019a4 <HAL_GPIO_Init+0xcc>
 800194e:	2b12      	cmp	r3, #18
 8001950:	d859      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001952:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <HAL_GPIO_Init+0x80>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	080019d3 	.word	0x080019d3
 800195c:	080019ad 	.word	0x080019ad
 8001960:	080019bf 	.word	0x080019bf
 8001964:	08001a01 	.word	0x08001a01
 8001968:	08001a07 	.word	0x08001a07
 800196c:	08001a07 	.word	0x08001a07
 8001970:	08001a07 	.word	0x08001a07
 8001974:	08001a07 	.word	0x08001a07
 8001978:	08001a07 	.word	0x08001a07
 800197c:	08001a07 	.word	0x08001a07
 8001980:	08001a07 	.word	0x08001a07
 8001984:	08001a07 	.word	0x08001a07
 8001988:	08001a07 	.word	0x08001a07
 800198c:	08001a07 	.word	0x08001a07
 8001990:	08001a07 	.word	0x08001a07
 8001994:	08001a07 	.word	0x08001a07
 8001998:	08001a07 	.word	0x08001a07
 800199c:	080019b5 	.word	0x080019b5
 80019a0:	080019c9 	.word	0x080019c9
 80019a4:	4a82      	ldr	r2, [pc, #520]	; (8001bb0 <HAL_GPIO_Init+0x2d8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019aa:	e02c      	b.n	8001a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e029      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	3304      	adds	r3, #4
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e024      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	3308      	adds	r3, #8
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e01f      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	330c      	adds	r3, #12
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e01a      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019da:	2304      	movs	r3, #4
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e013      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	611a      	str	r2, [r3, #16]
          break;
 80019f2:	e009      	b.n	8001a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f4:	2308      	movs	r3, #8
 80019f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	615a      	str	r2, [r3, #20]
          break;
 80019fe:	e003      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          break;
 8001a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d801      	bhi.n	8001a12 <HAL_GPIO_Init+0x13a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	e001      	b.n	8001a16 <HAL_GPIO_Init+0x13e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d802      	bhi.n	8001a24 <HAL_GPIO_Init+0x14c>
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x152>
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	3b08      	subs	r3, #8
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	210f      	movs	r1, #15
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8090 	beq.w	8001b78 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a58:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a70:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x2e0>)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a49      	ldr	r2, [pc, #292]	; (8001bbc <HAL_GPIO_Init+0x2e4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_GPIO_Init+0x1e0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <HAL_GPIO_Init+0x2e8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d007      	beq.n	8001ab4 <HAL_GPIO_Init+0x1dc>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a47      	ldr	r2, [pc, #284]	; (8001bc4 <HAL_GPIO_Init+0x2ec>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_GPIO_Init+0x1d8>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e004      	b.n	8001aba <HAL_GPIO_Init+0x1e2>
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0x1e2>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_GPIO_Init+0x1e2>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	f002 0203 	and.w	r2, r2, #3
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4093      	lsls	r3, r2
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aca:	493b      	ldr	r1, [pc, #236]	; (8001bb8 <HAL_GPIO_Init+0x2e0>)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae4:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af2:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4933      	ldr	r1, [pc, #204]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	492d      	ldr	r1, [pc, #180]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4929      	ldr	r1, [pc, #164]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4923      	ldr	r1, [pc, #140]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	491f      	ldr	r1, [pc, #124]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4919      	ldr	r1, [pc, #100]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4915      	ldr	r1, [pc, #84]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f47f aeaf 	bne.w	80018ec <HAL_GPIO_Init+0x14>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	372c      	adds	r7, #44	; 0x2c
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	10320000 	.word	0x10320000
 8001ba0:	10310000 	.word	0x10310000
 8001ba4:	10220000 	.word	0x10220000
 8001ba8:	10210000 	.word	0x10210000
 8001bac:	10120000 	.word	0x10120000
 8001bb0:	10110000 	.word	0x10110000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e001      	b.n	8001bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]
 8001c06:	4613      	mov	r3, r2
 8001c08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c0a:	787b      	ldrb	r3, [r7, #1]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c10:	887a      	ldrh	r2, [r7, #2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c16:	e003      	b.n	8001c20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	041a      	lsls	r2, r3, #16
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c3c:	887a      	ldrh	r2, [r7, #2]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	041a      	lsls	r2, r3, #16
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	400b      	ands	r3, r1
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e26c      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8087 	beq.w	8001d8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d00c      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c88:	4b8f      	ldr	r3, [pc, #572]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d112      	bne.n	8001cba <HAL_RCC_OscConfig+0x5e>
 8001c94:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d10b      	bne.n	8001cba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca2:	4b89      	ldr	r3, [pc, #548]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d06c      	beq.n	8001d88 <HAL_RCC_OscConfig+0x12c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d168      	bne.n	8001d88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e246      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x76>
 8001cc4:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a7f      	ldr	r2, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e02e      	b.n	8001d30 <HAL_RCC_OscConfig+0xd4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x98>
 8001cda:	4b7b      	ldr	r3, [pc, #492]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a77      	ldr	r2, [pc, #476]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e01d      	b.n	8001d30 <HAL_RCC_OscConfig+0xd4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0xbc>
 8001cfe:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a71      	ldr	r2, [pc, #452]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6e      	ldr	r2, [pc, #440]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0xd4>
 8001d18:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a67      	ldr	r2, [pc, #412]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fcb6 	bl	80016a8 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fcb2 	bl	80016a8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1fa      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0xe4>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fca2 	bl	80016a8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fc9e 	bl	80016a8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1e6      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x10c>
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d063      	beq.n	8001e5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001da2:	4b49      	ldr	r3, [pc, #292]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d11c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x18c>
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d116      	bne.n	8001de8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x176>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e1ba      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4939      	ldr	r1, [pc, #228]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	e03a      	b.n	8001e5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df0:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7ff fc57 	bl	80016a8 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fc53 	bl	80016a8 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e19b      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4927      	ldr	r1, [pc, #156]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fc36 	bl	80016a8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e40:	f7ff fc32 	bl	80016a8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e17a      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03a      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d019      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_RCC_OscConfig+0x274>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7ff fc16 	bl	80016a8 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e80:	f7ff fc12 	bl	80016a8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e15a      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f000 fa9a 	bl	80023d8 <RCC_Delay>
 8001ea4:	e01c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff fbfc 	bl	80016a8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fbf8 	bl	80016a8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d908      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e140      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	42420000 	.word	0x42420000
 8001ed0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b9e      	ldr	r3, [pc, #632]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e9      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a6 	beq.w	800203a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b97      	ldr	r3, [pc, #604]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10d      	bne.n	8001f1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b94      	ldr	r3, [pc, #592]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a93      	ldr	r2, [pc, #588]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b91      	ldr	r3, [pc, #580]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b8e      	ldr	r3, [pc, #568]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8a      	ldr	r2, [pc, #552]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fbb9 	bl	80016a8 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7ff fbb5 	bl	80016a8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0fd      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x4f8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x312>
 8001f60:	4b7b      	ldr	r3, [pc, #492]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a7a      	ldr	r2, [pc, #488]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e02d      	b.n	8001fca <HAL_RCC_OscConfig+0x36e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x334>
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a75      	ldr	r2, [pc, #468]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b73      	ldr	r3, [pc, #460]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a72      	ldr	r2, [pc, #456]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	e01c      	b.n	8001fca <HAL_RCC_OscConfig+0x36e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d10c      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x356>
 8001f98:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a6c      	ldr	r2, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	f043 0304 	orr.w	r3, r3, #4
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a69      	ldr	r2, [pc, #420]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	e00b      	b.n	8001fca <HAL_RCC_OscConfig+0x36e>
 8001fb2:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a66      	ldr	r2, [pc, #408]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b64      	ldr	r3, [pc, #400]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a63      	ldr	r2, [pc, #396]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d015      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff fb69 	bl	80016a8 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7ff fb65 	bl	80016a8 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0ab      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	4b57      	ldr	r3, [pc, #348]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ee      	beq.n	8001fda <HAL_RCC_OscConfig+0x37e>
 8001ffc:	e014      	b.n	8002028 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb53 	bl	80016a8 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7ff fb4f 	bl	80016a8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e095      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ee      	bne.n	8002006 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	4b48      	ldr	r3, [pc, #288]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a47      	ldr	r2, [pc, #284]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8081 	beq.w	8002146 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002044:	4b42      	ldr	r3, [pc, #264]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d061      	beq.n	8002114 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d146      	bne.n	80020e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x4fc>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff fb23 	bl	80016a8 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff fb1f 	bl	80016a8 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e067      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d108      	bne.n	80020a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	492d      	ldr	r1, [pc, #180]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a19      	ldr	r1, [r3, #32]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	430b      	orrs	r3, r1
 80020b2:	4927      	ldr	r1, [pc, #156]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x4fc>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff faf3 	bl	80016a8 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff faef 	bl	80016a8 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e037      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x46a>
 80020e4:	e02f      	b.n	8002146 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_RCC_OscConfig+0x4fc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fadc 	bl	80016a8 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fad8 	bl	80016a8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e020      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x498>
 8002112:	e018      	b.n	8002146 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e013      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	42420060 	.word	0x42420060

0800215c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d0      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0207 	bic.w	r2, r3, #7
 8002186:	4965      	ldr	r1, [pc, #404]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b8      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a58      	ldr	r2, [pc, #352]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	494d      	ldr	r1, [pc, #308]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d040      	beq.n	800227c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e07f      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e073      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06b      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4936      	ldr	r1, [pc, #216]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7ff fa2c 	bl	80016a8 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7ff fa28 	bl	80016a8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e053      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d210      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4922      	ldr	r1, [pc, #136]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e032      	b.n	8002312 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4916      	ldr	r1, [pc, #88]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ea:	f000 f821 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	490a      	ldr	r1, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1cc>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1d0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f98a 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40022000 	.word	0x40022000
 8002320:	40021000 	.word	0x40021000
 8002324:	08002c3c 	.word	0x08002c3c
 8002328:	20000014 	.word	0x20000014
 800232c:	20000024 	.word	0x20000024

08002330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x30>
 800235a:	2b08      	cmp	r3, #8
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x36>
 800235e:	e027      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	e027      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0c9b      	lsrs	r3, r3, #18
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0c5b      	lsrs	r3, r3, #17
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002392:	fb02 f203 	mul.w	r2, r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e004      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	613b      	str	r3, [r7, #16]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023b2:	613b      	str	r3, [r7, #16]
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	693b      	ldr	r3, [r7, #16]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	08002c4c 	.word	0x08002c4c
 80023d0:	08002c5c 	.word	0x08002c5c
 80023d4:	003d0900 	.word	0x003d0900

080023d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <RCC_Delay+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <RCC_Delay+0x38>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a5b      	lsrs	r3, r3, #9
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f4:	bf00      	nop
  }
  while (Delay --);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <RCC_Delay+0x1c>
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000014 	.word	0x20000014
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e041      	b.n	80024aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fe72 	bl	8001124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f000 fa56 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e035      	b.n	8002538 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_TIM_Base_Start_IT+0x90>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_TIM_Base_Start_IT+0x4e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d004      	beq.n	8002502 <HAL_TIM_Base_Start_IT+0x4e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_TIM_Base_Start_IT+0x94>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d111      	bne.n	8002526 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b06      	cmp	r3, #6
 8002512:	d010      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	e007      	b.n	8002536 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400

0800254c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0202 	mvn.w	r2, #2
 8002580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f998 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f98b 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f99a 	bl	80028de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0204 	mvn.w	r2, #4
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f972 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f965 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f974 	bl	80028de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0208 	mvn.w	r2, #8
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2204      	movs	r2, #4
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f94c 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f93f 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f94e 	bl	80028de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d020      	beq.n	8002694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0210 	mvn.w	r2, #16
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2208      	movs	r2, #8
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f926 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f919 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f928 	bl	80028de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0201 	mvn.w	r2, #1
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe f908 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fa6f 	bl	8002bba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8f8 	bl	80028f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0220 	mvn.w	r2, #32
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa42 	bl	8002ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIM_ConfigClockSource+0x1c>
 8002744:	2302      	movs	r3, #2
 8002746:	e0b4      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x186>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002780:	d03e      	beq.n	8002800 <HAL_TIM_ConfigClockSource+0xd4>
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	f200 8087 	bhi.w	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	f000 8086 	beq.w	800289e <HAL_TIM_ConfigClockSource+0x172>
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002796:	d87f      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b70      	cmp	r3, #112	; 0x70
 800279a:	d01a      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0xa6>
 800279c:	2b70      	cmp	r3, #112	; 0x70
 800279e:	d87b      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b60      	cmp	r3, #96	; 0x60
 80027a2:	d050      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x11a>
 80027a4:	2b60      	cmp	r3, #96	; 0x60
 80027a6:	d877      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b50      	cmp	r3, #80	; 0x50
 80027aa:	d03c      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0xfa>
 80027ac:	2b50      	cmp	r3, #80	; 0x50
 80027ae:	d873      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d058      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x13a>
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d86f      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b30      	cmp	r3, #48	; 0x30
 80027ba:	d064      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027bc:	2b30      	cmp	r3, #48	; 0x30
 80027be:	d86b      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d060      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d867      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d05c      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d05a      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	e062      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6899      	ldr	r1, [r3, #8]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f000 f96a 	bl	8002aba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	609a      	str	r2, [r3, #8]
      break;
 80027fe:	e04f      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f000 f953 	bl	8002aba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002822:	609a      	str	r2, [r3, #8]
      break;
 8002824:	e03c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	461a      	mov	r2, r3
 8002834:	f000 f8ca 	bl	80029cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2150      	movs	r1, #80	; 0x50
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f921 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002844:	e02c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	461a      	mov	r2, r3
 8002854:	f000 f8e8 	bl	8002a28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2160      	movs	r1, #96	; 0x60
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f911 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002864:	e01c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	461a      	mov	r2, r3
 8002874:	f000 f8aa 	bl	80029cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2140      	movs	r1, #64	; 0x40
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f901 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002884:	e00c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f000 f8f8 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002896:	e003      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      break;
 800289c:	e000      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800289e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
	...

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <TIM_Base_SetConfig+0xc0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <TIM_Base_SetConfig+0x28>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d003      	beq.n	800292c <TIM_Base_SetConfig+0x28>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <TIM_Base_SetConfig+0xc4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d108      	bne.n	800293e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <TIM_Base_SetConfig+0xc0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <TIM_Base_SetConfig+0x52>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d003      	beq.n	8002956 <TIM_Base_SetConfig+0x52>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <TIM_Base_SetConfig+0xc4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d108      	bne.n	8002968 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <TIM_Base_SetConfig+0xc0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d103      	bne.n	800299c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	611a      	str	r2, [r3, #16]
  }
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400

080029cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f023 0201 	bic.w	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f023 030a 	bic.w	r3, r3, #10
 8002a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f023 0210 	bic.w	r2, r3, #16
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	031b      	lsls	r3, r3, #12
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f043 0307 	orr.w	r3, r3, #7
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b087      	sub	sp, #28
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	021a      	lsls	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e041      	b.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d004      	beq.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10c      	bne.n	8002b82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400

08002ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	2600      	movs	r6, #0
 8002bd0:	4d0c      	ldr	r5, [pc, #48]	; (8002c04 <__libc_init_array+0x38>)
 8002bd2:	4c0d      	ldr	r4, [pc, #52]	; (8002c08 <__libc_init_array+0x3c>)
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	42a6      	cmp	r6, r4
 8002bda:	d109      	bne.n	8002bf0 <__libc_init_array+0x24>
 8002bdc:	f000 f822 	bl	8002c24 <_init>
 8002be0:	2600      	movs	r6, #0
 8002be2:	4d0a      	ldr	r5, [pc, #40]	; (8002c0c <__libc_init_array+0x40>)
 8002be4:	4c0a      	ldr	r4, [pc, #40]	; (8002c10 <__libc_init_array+0x44>)
 8002be6:	1b64      	subs	r4, r4, r5
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	42a6      	cmp	r6, r4
 8002bec:	d105      	bne.n	8002bfa <__libc_init_array+0x2e>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf4:	4798      	blx	r3
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e7ee      	b.n	8002bd8 <__libc_init_array+0xc>
 8002bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfe:	4798      	blx	r3
 8002c00:	3601      	adds	r6, #1
 8002c02:	e7f2      	b.n	8002bea <__libc_init_array+0x1e>
 8002c04:	08002c60 	.word	0x08002c60
 8002c08:	08002c60 	.word	0x08002c60
 8002c0c:	08002c60 	.word	0x08002c60
 8002c10:	08002c64 	.word	0x08002c64

08002c14 <memset>:
 8002c14:	4603      	mov	r3, r0
 8002c16:	4402      	add	r2, r0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <memset+0xa>
 8002c1c:	4770      	bx	lr
 8002c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c22:	e7f9      	b.n	8002c18 <memset+0x4>

08002c24 <_init>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr

08002c30 <_fini>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr
